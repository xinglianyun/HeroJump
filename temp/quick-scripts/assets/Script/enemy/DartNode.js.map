{"version":3,"sources":["DartNode.js"],"names":["cc","Class","extends","Component","properties","_idle","default","type","Boolean","onLoad","console","log","node","uuid","getComponent","setRealListener","_enemyNodeType","Global","enemyNodeType","dartnode","start","onInit","setPosition","setScale","beVictory","stopAllActions","beKilled","gameManager","collectEnemy","beCollected","setIdle","idle","getEnemyNodeType","DisplayDeadEnemyState","isDeadState","BoxCollider","enabled"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,eAAQ;AACJC,qBAAU,KADN;AAEJC,kBAAOP,GAAGQ;AAFN;AADA,KAHP;;AAUL;;AAEAC,UAZK,oBAYK;AACNC,gBAAQC,GAAR,CAAY,wCAAwC,KAAKC,IAAL,CAAUC,IAA9D;;AAEA,aAAKD,IAAL,CAAUE,YAAV,CAAuB,OAAvB,EAAgCC,eAAhC,CAAgD,IAAhD;AACA,aAAKC,cAAL,GAAsBC,OAAOC,aAAP,CAAqBC,QAA3C;AACH,KAjBI;AAmBLC,SAnBK,mBAmBI,CAER,CArBI;;;AAuBL;;AAEA;AACAC,YAAS,kBAAU;AACfX,gBAAQC,GAAR,CAAY,wCAAwC,KAAKC,IAAL,CAAUC,IAA9D;AACA,aAAKD,IAAL,CAAUU,WAAV,CAAsB,CAAtB,EAAyB,CAAzB;AACA,aAAKV,IAAL,CAAUW,QAAV,CAAmB,CAAnB;AACH,KA9BI;AA+BL;;;AAGAC,eAAY,qBAAU;AAClBd,gBAAQC,GAAR,CAAY,2CAA2C,KAAKC,IAAL,CAAUC,IAAjE;;AAEA,aAAKD,IAAL,CAAUa,cAAV;AACH,KAtCI;AAuCL;;;AAGAC,cAAW,oBAAU;AACjBhB,gBAAQC,GAAR,CAAY,0CAA0C,KAAKC,IAAL,CAAUC,IAAhE;;AAEA,aAAKD,IAAL,CAAUa,cAAV;AACAR,eAAOU,WAAP,CAAmBC,YAAnB,CAAgC,KAAKhB,IAArC,EAA2C,KAAKI,cAAhD;AACH,KA/CI;;AAiDL;;;AAGAa,iBAAc,uBAAU;AACpBnB,gBAAQC,GAAR,CAAY,6CAA6C,KAAKC,IAAL,CAAUC,IAAnE;;AAEA,aAAKD,IAAL,CAAUa,cAAV;AACAR,eAAOU,WAAP,CAAmBC,YAAnB,CAAgC,KAAKhB,IAArC,EAA2C,KAAKI,cAAhD;AACH,KAzDI;;AA2DL;;;AAGAc,aAAU,iBAASC,IAAT,EAAc;AACpBrB,gBAAQC,GAAR,CAAY,yCAAyC,KAAKC,IAAL,CAAUC,IAA/D;;AAEA,aAAKR,KAAL,GAAY0B,IAAZ;AACH,KAlEI;;AAoEL;;;AAGAC,sBAAmB,4BAAU;AACzB,eAAO,KAAKhB,cAAZ;AACH,KAzEI;;AA2EL;;;AAGAiB,2BAAwB,+BAASC,WAAT,EAAqB;AACzCxB,gBAAQC,GAAR,CAAY,uDAAuD,KAAKC,IAAL,CAAUC,IAA7E;;AAEA,aAAKC,YAAL,CAAkBd,GAAGmC,WAArB,EAAkCC,OAAlC,GAA4C,CAACF,WAA7C;AACA,aAAKJ,OAAL,CAAaI,WAAb;AACH;;AAED;AArFK,CAAT","file":"DartNode.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\enemy","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        _idle : {\r\n            default : false,\r\n            type : cc.Boolean\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode onLoad \" + this.node.uuid)\r\n\r\n        this.node.getComponent(\"Enemy\").setRealListener(this)\r\n        this._enemyNodeType = Global.enemyNodeType.dartnode\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n\r\n    //************************************start logic*************************************************//\r\n    onInit : function(){\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode onInit \" + this.node.uuid)\r\n        this.node.setPosition(0, 0)\r\n        this.node.setScale(1)\r\n    },\r\n    /**\r\n     * desc: kill the hero\r\n     */    \r\n    beVictory : function(){\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode beVictory \" + this.node.uuid)\r\n\r\n        this.node.stopAllActions()\r\n    },\r\n    /**\r\n     * desc: killed by the hero\r\n     */\r\n    beKilled : function(){\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode beKilled \" + this.node.uuid)\r\n        \r\n        this.node.stopAllActions()\r\n        Global.gameManager.collectEnemy(this.node, this._enemyNodeType)\r\n    },\r\n\r\n    /**\r\n     * desc: node to be collected\r\n     */\r\n    beCollected : function(){\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode beCollected \" + this.node.uuid)\r\n\r\n        this.node.stopAllActions()\r\n        Global.gameManager.collectEnemy(this.node, this._enemyNodeType)\r\n    },\r\n\r\n    /**\r\n     * desc: set the enemy state\r\n     */\r\n    setIdle : function(idle){\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode setIdle \" + this.node.uuid)\r\n        \r\n        this._idle= idle\r\n    },\r\n\r\n    /**\r\n     * desc: get enemy node type\r\n     */\r\n    getEnemyNodeType : function(){\r\n        return this._enemyNodeType\r\n    },\r\n\r\n    /**\r\n     * desc: display the dead enemy when killed\r\n     */\r\n    DisplayDeadEnemyState : function(isDeadState){\r\n        console.log(\"aaaaaaaaaaaaaaaaaa DartNode DisplayDeadEnemyState \" + this.node.uuid)\r\n        \r\n        this.getComponent(cc.BoxCollider).enabled = !isDeadState\r\n        this.setIdle(isDeadState)\r\n    }\r\n\r\n    //************************************end logic*************************************************//\r\n});\r\n"]}